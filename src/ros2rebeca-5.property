property{
	define {
		onTarget1 = r1.distance2target <=2; //r1.rx==r1.targetX && r1.ry==r1.targetY;
		done1 = r1.moves[0]>0 && r1.moves[0]-r1.moveidx<=2;
		
		onTarget2 = r2.distance2target <=2; //r2.rx==r2.targetX && r2.ry==r2.targetY;
		done2 = r2.moves[0]>0 && r2.moves[0]-r2.moveidx<=2;		
		
		onTarget3 =  r3.distance2target <=2; //r3.rx==r3.targetX && r3.ry==r3.targetY;
		done3 = r3.moves[0]>0 && r3.moves[0]-r3.moveidx<=2;				

		onTarget4 =  r4.distance2target <=2; //r4.rx==r4.targetX && r4.ry==r4.targetY;
		done4 = r4.moves[0]>0 && r4.moves[0]-r4.moveidx<=2;				

		onTarget5 =  r5.distance2target <=2; //r5.rx==r5.targetX && r5.ry==r5.targetY;
		done5 = r5.moves[0]>0 && r5.moves[0]-r5.moveidx<=2;		
	}
	
	Assertion{
		reached_all : (!(done1 && onTarget1) || !(done2 && onTarget2) || !(done3 && onTarget3) || !(done4 && onTarget4) || !(done5 && onTarget5)) 
		^ (done1 && onTarget1 && done2 && onTarget2 && done3 && onTarget3 && done4 && onTarget4 && done5 && onTarget5);
		/*
		collision_free: !( 
			(r1.rx==r2.rx && r1.ry==r2.ry) 
			||(r1.rx==r3.rx && r1.ry==r3.ry)
			||(r1.rx==r4.rx && r1.ry==r4.ry)
			||(r1.rx==r5.rx && r1.ry==r5.ry)
			||(r2.rx==r3.rx && r2.ry==r3.ry)
			||(r2.rx==r4.rx && r2.ry==r4.ry)
			||(r2.rx==r5.rx && r2.ry==r5.ry)
			||(r3.rx==r4.rx && r3.ry==r4.ry)
			||(r3.rx==r5.rx && r3.ry==r5.ry)
		);
		*/
	}
}